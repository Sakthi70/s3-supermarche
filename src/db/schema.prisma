datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id             String          @id @default(cuid())
  name           String?
  username       String?         @unique
  email          String?         @unique
  hashedPassword String?
  emailVerified  DateTime?
  image          String?
  isAdmin        Boolean         @default(false)
  Session        Session[]
  Account        Account?
  // Optional for WebAuthn support
  Authenticator  Authenticator[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  id                       String  @id @default(cuid())
  userId                   String  @unique
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String? @db.Text
  access_token             String? @db.Text
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String? @db.Text
  session_state            String?
  refresh_token_expires_in Int?
  user                     User?   @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
}

// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}

model Category {
  id         String     @id @default(cuid())
  name       String
  parent     Category?  @relation("parentId", fields: [parentId], references: [id])
  parentId   String?
  tag        String?
  image      String?
  featured   Boolean    @default(false)
  best       Boolean    @default(false)
  additional Boolean    @default(false)
  shopList   Boolean    @default(false)
  enabled    Boolean    @default(true)
  slug       String     @unique
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  categories Category[] @relation("parentId")
  products   Product[]
}

model Banner {
  id          String    @id @default(cuid())
  title       String
  description String    @db.Text
  type        Int
  expires     DateTime?
  image       String?
  slug       String?
  enabled     Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Product {
  id             String           @id @default(cuid())
  name          String
  shortDescription String           @db.Text
  description    String           @db.Text
  category       Category         @relation(fields: [categoryId], references: [id])
  categoryId     String
  tags            String[]
  images          String[]
  brandName      String?
  brandImage     String?
  price          Float
  salePrice     Float?
  stock          Int
  isBrand         Boolean          @default(false)
  type            String
  value           String
  enabled        Boolean          @default(true)
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
}
